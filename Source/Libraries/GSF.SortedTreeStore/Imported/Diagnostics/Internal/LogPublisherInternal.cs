//******************************************************************************************************
//  LogPublisherInternal.cs - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the Eclipse Public License -v 1.0 (the "License"); you may
//  not use this file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://www.opensource.org/licenses/eclipse-1.0.php
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  10/24/2016 - Steven E. Chisholm
//       Generated original version of source code. 
//       
//
//******************************************************************************************************

using System;
using System.Collections.Concurrent;
using System.IO;
using System.Reflection;

namespace GSF.Diagnostics
{
    /// <summary>
    /// This publisher is shared by all other instances of the same <see cref="Type"/>.
    /// </summary>
    internal class LogPublisherInternal
    {
        #region [ Members ]

        /// <summary>
        /// Occurs when a new <see cref="LogMessage"/> is ready to be published.
        /// </summary>
        private LoggerInternal m_logger;

        /// <summary>
        /// The full name of the type.
        /// </summary>
        public readonly string TypeFullName;

        /// <summary>
        /// The full name of the assembly. 
        /// </summary>
        public readonly string AssemblyFullName;

        public readonly Type Type;

        public readonly Assembly Assembly;

        /// <summary>
        /// The maximum number of distinct events that this publisher can generate. (Default: 20)
        /// </summary>
        /// <remarks>
        /// Since message suppression and collection occurs at the event name level, it is important
        /// to have only a few distinct message types. This is the limit so misapplication
        /// of this publisher will not cause memory impacts on the system.
        /// 
        /// It is recommended to keep the event name as a fixed string and not report any other meta data
        /// with the event.
        /// </remarks>
        // ReSharper disable once ConvertToConstant.Global
        public int MaxDistinctEventPublisherCount { get; set; }

        /// <summary>
        /// Where the <see cref="LogEventPublisherInternal"/>s of specific events are cached.
        /// </summary>
        private readonly ConcurrentDictionary<Tuple<LogMessageAttributes, string>, LogEventPublisherInternal> m_lookupEventPublishers;

        private LogEventPublisherInternal m_excessivePublisherEventNames;

        private MessageAttributeFilter m_attributeFilterCache;

        #endregion

        #region [ Constructors ]

        public LogPublisherInternal(LoggerInternal logger, Type type)
        {
            if ((object)type == null)
                throw new ArgumentNullException(nameof(type));
            if (type == null)
                throw new ArgumentNullException(nameof(type));
            if (logger == null)
                throw new ArgumentNullException(nameof(logger));

            Type = type;
            Assembly = type.Assembly;
            TypeFullName = TrimAfterFullName(type.AssemblyQualifiedName);
            AssemblyFullName = Path.GetFileName(Assembly.Location);

            m_lookupEventPublishers = new ConcurrentDictionary<Tuple<LogMessageAttributes, string>, LogEventPublisherInternal>();

            MaxDistinctEventPublisherCount = 20;
            m_logger = logger;
            m_attributeFilterCache = null;
        }

        #endregion

        #region [ Methods ]

        /// <summary>
        /// Sets the subscription cache to null so it must be recomputed the next time it is checked.
        /// </summary>
        public void ClearSubscriptionCache()
        {
            m_attributeFilterCache = null;
        }

        /// <summary>
        /// Checks messages generated by this publisher and the provided attributes will be received by a subscriber.
        /// </summary>
        /// <param name="attributes"></param>
        /// <returns></returns>
        public bool HasSubscribers(LogMessageAttributes attributes)
        {
            var subscription = m_attributeFilterCache;
            if (subscription == null)
            {
                subscription = m_logger.GetSubscription(this);
                m_attributeFilterCache = subscription;
            }
            return subscription.IsSubscribedTo(attributes);
        }

        /// <summary>
        /// Initializes an <see cref="LogEventPublisher"/> with a series of settings.
        /// </summary>
        /// <param name="attributes"></param>
        /// <param name="eventName">the name of the event.</param>
        /// <returns></returns>
        public LogEventPublisherInternal RegisterEvent(LogMessageAttributes attributes, string eventName)
        {
            LogEventPublisherInternal publisher;
            if (m_lookupEventPublishers.TryGetValue(Tuple.Create(attributes, eventName), out publisher))
            {
                return publisher;
            }
            return RegisterNewEvent(attributes, eventName, 0, 1, 20);
        }

        /// <summary>
        /// Initializes an <see cref="LogEventPublisher"/> with a series of settings.
        /// </summary>
        /// <param name="attributes"></param>
        /// <param name="eventName"></param>
        /// <param name="stackTraceDepth"></param>
        /// <param name="messagesPerSecond"></param>
        /// <param name="burstLimit"></param>
        /// <returns></returns>
        public LogEventPublisherInternal RegisterEvent(LogMessageAttributes attributes, string eventName, int stackTraceDepth, MessageRate messagesPerSecond, int burstLimit)
        {
            LogEventPublisherInternal publisher;
            if (m_lookupEventPublishers.TryGetValue(Tuple.Create(attributes, eventName), out publisher))
            {
                return publisher;
            }
            return RegisterNewEvent(attributes, eventName, stackTraceDepth, messagesPerSecond, burstLimit);
        }

        private LogEventPublisherInternal RegisterNewEvent(LogMessageAttributes attributes, string eventName, int stackTraceDepth, double messagesPerSecond, int burstLimit)
        {
            //Note: A race condition can cause more then the maximum number of entries to exist, however, this is not a concern.
            if (m_lookupEventPublishers.Count > MaxDistinctEventPublisherCount)
            {
                if (m_excessivePublisherEventNames == null)
                {
                    var owner1 = new LogEventPublisherDetails(TypeFullName, AssemblyFullName,
                        "Excessive Event Names: Event names for this publisher has been limited to " + MaxDistinctEventPublisherCount.ToString() +
                        "Please adjust MaxDistinctEventPublisherCount if this is not a bug and this publisher can truly create this many publishers.");
                    m_excessivePublisherEventNames = new LogEventPublisherInternal(attributes, owner1, this, m_logger, stackTraceDepth, messagesPerSecond, burstLimit);
                }
                return m_excessivePublisherEventNames;
            }

            LogEventPublisherInternal publisher;
            var owner = new LogEventPublisherDetails(TypeFullName, AssemblyFullName, eventName);
            publisher = new LogEventPublisherInternal(attributes, owner, this, m_logger, stackTraceDepth, messagesPerSecond, burstLimit);
            publisher = m_lookupEventPublishers.GetOrAdd(Tuple.Create(attributes, eventName), publisher);
            return publisher;
        }

        #endregion


        /// <summary>
        /// Trims the unused information after the namespace.class+subclass details.
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        private static string TrimAfterFullName(string name)
        {
            int newLength = name.Length;
            int indexOfBracket = name.IndexOf('[');
            int indexOfComma = name.IndexOf(',');

            if (indexOfBracket >= 0)
                newLength = Math.Min(indexOfBracket, newLength);
            if (indexOfComma >= 0)
                newLength = Math.Min(indexOfComma, newLength);
            name = name.Substring(0, newLength).Trim();
            return name;
        }
    }
}
