@*******************************************************************************************************
//  ImportCOMTRADE.cshtml - Gbtc
//
//  Copyright © 2017, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  09/27/2017 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System.Net.Http
@using System.Threading
@using GSF.ComponentModel.DataAnnotations
@using GSF.Data.Model
@using GSF.Identity
@using GSF.Security
@using GSF.Web
@using GSF.Web.Model
@using GSF.Web.Shared
@using openHistorian.Model
@inherits ExtendedTemplateBase<AppModel>
@{
    Layout = "Layout.cshtml";
    ViewBag.HidePageTitle = true;
    ViewBag.Title = "COMTRADE Importer";

    HttpRequestMessage request = ViewBag.Request;
    Dictionary<string, string> parameters = request.QueryParameters();
    string parameter;
    int deviceID;

    if (!parameters.TryGetValue("DeviceID", out parameter) || !int.TryParse(parameter, out deviceID)) {
        deviceID = 0;
    }

    dynamic application = ViewBag.Application;
    int[] digitalSignalTypeIDs = { 0, 0, 0 };
    int statisticSignalTypeID = 0;
    bool loadedSignalTypeIDs = false;

    if ((object)application != null && (object)application.DigitalSignalTypeIDs != null && (object)application.StatisticSignalTypeID != null) {
        digitalSignalTypeIDs = application.DigitalSignalTypeIDs;
        statisticSignalTypeID = application.StatisticSignalTypeID;
        loadedSignalTypeIDs = true;
    }

    if (!loadedSignalTypeIDs) {
        DataContext dataContext = ViewBag.DataContext;

        if ((object)dataContext != null) {
            TableOperations<SignalType> signalTypeOperations = dataContext.Table<SignalType>();
            const string AcronymExpression = "Acronym = {0}";

            digitalSignalTypeIDs[0] = signalTypeOperations.QueryRecordWhere(AcronymExpression, "DIGI").ID;
            digitalSignalTypeIDs[1] = signalTypeOperations.QueryRecordWhere(AcronymExpression, "FLAG").ID;
            digitalSignalTypeIDs[2] = signalTypeOperations.QueryRecordWhere(AcronymExpression, "QUAL").ID;
            statisticSignalTypeID = signalTypeOperations.QueryRecordWhere(AcronymExpression, "STAT").ID;

            if ((object)application != null) {
                application.DigitalSignalTypeIDs = digitalSignalTypeIDs;
                application.StatisticSignalTypeID = statisticSignalTypeID;
            }
        }
    }

    bool userIsEditor = UserIsEditor();
}
@section StyleSheets {
    <style>
        html, body {
            height: 100%;
        }

        span.new-record {
            border: red;
            border-style: solid;
            border-width: 4px;
            display: inline-block;
            padding-left: 3px;
            padding-right: 4px;
        }

        span.existing-record {
            border: lawngreen;
            border-style: solid;
            border-width: 4px;
            display: inline-block;
            padding-left: 3px;
            padding-right: 4px;
        }

        .input-label {
            text-align: right;
            vertical-align: top;
            padding: 6px;
            width: 160px;
        }

        .input-area {
            width: 80%;
            display: inline-table;
            vertical-align: middle;
        }

        @@media screen {
            .page-logo {
                margin-bottom: 2px;
                margin-top: -38px;
            }
        }

        @@media screen and (min-width: 638px) {
            .page-logo {
                margin-bottom: 2px;
                margin-top: -12px;
            }
        }
        
        @@media screen and (min-width: 868px) {
            .page-logo {
                margin-bottom: 2px;
                margin-top: -12px;
            }
        }

        @@media screen and (min-width: 992px) {
            .page-logo {
                margin-bottom: -25px;
                margin-top: -4px;
            }
        }
    </style>
}
@functions {
    public string GetCurrentUserID()
    {
        if ((object)Thread.CurrentPrincipal.Identity == null)
            return UserInfo.CurrentUserID;

        return Thread.CurrentPrincipal.Identity.Name;
    }

    // This function simply limits access to UI elements that the user does not have access to, server-side
    // functions will further validate user rights even if UI restriction was somehow bypassed
    public bool UserIsEditor()
    {
        SecurityPrincipal securityPrincipal = ViewBag.SecurityPrincipal as SecurityPrincipal;

        if ((object)securityPrincipal == null)
            return false;

        return securityPrincipal.IsInRole("Administrator") || securityPrincipal.IsInRole("Editor");
    }
}
<div id="headerArea">
    <h3 style="margin-top: -10px;">@ViewBag.Title <span class="label label-info" id="editDeviceName"></span> <img class="page-logo pull-right" src="Images/COMTRADEImporter.png"/></h3>
    <form>
        <table style="width: 95%">
            <tr>
                <td class="input-label">
                    <label for="inputConfigFile">Configuration File:</label>
                </td>
                <td>
                    <div class="input-group input-area" data-bind="css: { 'has-error': !fieldIsValid(configFile), 'has-feedback': !fieldIsValid(configFile) }">
                        <input id="inputConfigFile" type="text" placeholder="Full path to openHistorian service accessible COMTRADE configuration file name..." data-toggle="tooltip" data-placement="bottom" title="@string.Format("User \"{0}\" will need rights to specified path", UserInfo.CurrentUserID)" class="form-control" style="width: 100%" data-bind="textInput: configFile" required>
                        <span class="input-group-btn">
                            <button class="btn btn-default" id="analyzeConfig" data-bind="enable: dataHubIsConnected() && fieldIsValid(configFile, true)">Analyze</button>
                        </span>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="input-label">
                    <label for="inputDeviceAcronym">Device Acronym:</label>
                </td>
                <td>
                    <div class="input-group" data-bind="css: { 'has-error': !fieldIsValid(deviceAcronym, true), 'has-feedback': !fieldIsValid(deviceAcronym, true) }">
                        <input id="inputDeviceAcronym" type="text" class="form-control" style="width: 250px" data-bind="acronym: deviceAcronym, textInput: deviceAcronym" required>
                        <span class="glyphicon glyphicon-remove form-control-feedback" data-bind="visible: !fieldIsValid(deviceAcronym, true)"></span>
                    </div>
                </td>
            </tr>
            <tr>
                <td colspan="2">
                    <div class="checkbox">
                        <label><input type="checkbox" data-bind="checked: inferTimeFromSampleRates"> Infer timestamps from sample rates</label>
                    </div>
                </td>
            </tr>
        </table>
    </form>
</div>
<div id="contentWell" class="well well-dynamic-content">
    <div id="responsiveTableDiv" class="table-responsive" style="display: none; border: none">        
        <span id="channelCount">Channel Count: <span data-bind='html: channelCount'></span></span>
        <span id="bulkSelectionButtons" class="pull-right" style="text-align: right">
            @if (userIsEditor) {
            <span>
                <button type="button" class="btn btn-sm btn-default" id="selectAll">Select All</button>
                <button type="button" class="btn btn-sm btn-default" id="unselectAll">Unselect All</button>&nbsp;
                <button type="button" class="btn btn-sm btn-primary pull-right" id="saveMeasurements" data-bind="disable: selectedMeasurementCount() == 0 || validationErrors() > 0 || !dataHubIsConnected()">
                    <span class="glyphicon glyphicon-plus"></span>&nbsp;&nbsp;Add&nbsp;New&nbsp;/&nbsp;Update&nbsp;<span data-bind="text: selectedMeasurementCount"></span>&nbsp;Selected
                </button>
            </span>
            } else {
                <span class="label label-danger label-md">User "@GetCurrentUserID()" does not have rights to import COMTRADE data.</span>
            }
        </span>
        <em data-bind="visible: validationErrors() > 0">
            <br/>
            <span data-bind="text: validationErrors()"></span> validation error<span data-bind="visible: validationErrors() > 1">s</span>...
        </em>
        <hr class="quarter-break" />
        <span id="configInfo"></span>
        <table class="table table-condensed table-striped table-hover">
            <thead>
            <tr>
                <th class="text-center">Selected</th>
                <th class="text-left">Measurement&nbsp;Point&nbsp;Tag</th>
                <th class="text-center" title="Stored in AlternateTag field...">Channel&nbsp;Index</th>
                <th class="text-left">Signal&nbsp;Reference</th>
                <th class="text-left">Description</th>
            </tr>
            </thead>
            <tbody data-bind="foreach: { data: measurements }">
            <tr id="deviceRow" style="visibility: hidden">
                <td width="5%" class="text-center valign-middle"><input type="checkbox" data-bind="checked: Selected"/></td>
                <td width="25%" class="text-left valign-middle">
                    <div class="input-group" data-bind="css: { 'has-error': !fieldIsValid(PointTag, true), 'has-feedback': !fieldIsValid(PointTag, true) }">
                        <input type="text" class="form-control" style="width: 250px" data-bind="acronym: PointTag, textInput: PointTag, enable: Selected" required>
                        <span class="glyphicon glyphicon-remove form-control-feedback" style="z-index: 5" data-bind="visible: !fieldIsValid(PointTag, true)"></span>
                    </div>
                </td>
                <td width="15%" class="text-center valign-middle" style="white-space: nowrap"><span data-bind="text: AlternateTag, css: Status, attr: { title: PointID() === 0 ? 'Measurement does not exist in openHistorian' : 'Measurement already exists within openHistorian' }"></span></td>
                <td width="25%" class="text-left valign-middle"><span data-bind="text: SignalReference, css: { 'disabled': !Selected() }"></span></td>
                <td width="30%" class="text-left valign-middle"><span data-bind="text: Description, css: { 'disabled': !Selected() }"></span></td>
            </tr>
            </tbody>
        </table>
        <div id="loadingDataLabel" style="display: none">
            Loading&nbsp;&nbsp;<span class="glyphicon glyphicon-refresh glyphicon-spin"></span>
        </div>
    </div>
</div>
@section Scripts {
    <script src="@Resources.Root/Shared/Scripts/knockout.js"></script>
    <script src="@Resources.Root/Shared/Scripts/knockout.mapping.js"></script>
    <script src="@Resources.Root/Shared/Scripts/knockout.validation.js"></script>
    <script src="@Resources.Root/Shared/Scripts/knockout.reactor.js"></script>
    <script src="@Resources.Root/Shared/Scripts/gsf.web.knockout.js"></script>
    <script>
        "use script";

        const deviceID = @deviceID;
        var viewModel = null;

        function isStatisticMeasurement(signalTypeID) {
            return signalTypeID === @statisticSignalTypeID;
        }

        function isDigitalMeasurement(signalTypeID) {
            return signalTypeID === @digitalSignalTypeIDs[0] ||
                   signalTypeID === @digitalSignalTypeIDs[1] ||
                   signalTypeID === @digitalSignalTypeIDs[2];
        }

        function DeviceViewModel() {
            const self = this;
            const channelCountFormat = "{0} &ndash; {1} Analog, {2} Digital &ndash; <span class='existing-record'>{3} Existing</span> &ndash; <span class='new-record'>{4} New</span>";

            // Observable fields
            self.configFile = ko.observable();
            self.deviceAcronym = ko.observable("DEVICENAME");
            self.inferTimeFromSampleRates = ko.observable(false);
            self.measurements = ko.observableArray();
            self.channelCount = ko.observable("Calculating...");
            self.errors = ko.validation.group(self);

            self.configFile.extend({
                required: false,
                serverPathExists: true
            });

            self.deviceAcronym.extend({
                required: true,
                pattern: {
                    message: "@Raw(AcronymValidationAttribute.DefaultErrorMessage)",
                    params: "@Raw(AcronymValidationAttribute.ValidationPattern.JavaScriptEncode())"
                },
                deviceUniqueInDatabase: true
            });

            // Regular fields
            self.analogIndex = 0;
            self.digitalIndex = 0;

            // Internal fields
            self._dataHubIsConnected = ko.observable(false);
            self._isDirty = ko.observable(false);

            // Properties
            self.dataHubIsConnected = ko.pureComputed({
                read: self._dataHubIsConnected,
                write: function(value) {
                    if (value === undefined)
                        value = false;

                    self._dataHubIsConnected(value);

                    if (value)
                        self.refreshValidationErrors();
                },
                owner: self
            });

            self.isDirty = ko.pureComputed({
                read: self._isDirty,
                write: function(value) {
                    if (value === undefined)
                        value = true;

                    self._isDirty(value);
                },
                owner: self
            });

            self.newMeasurementCount = ko.pureComputed({
                read: function () {
                    var count = 0;

                    self.measurements().forEach(function(measurement) {
                        if (measurement.PointID() === 0)
                            count++;
                    });

                    return count;
                },
                owner: self
            });

            self.existingMeasurementCount = ko.pureComputed({
                read: function() {
                    return self.measurements().length - self.newMeasurementCount();
                },
                owner: self
            });

            self.selectedMeasurementCount = ko.pureComputed({
                read: function() {
                    var count = 0;

                    self.measurements().forEach(function(measurement) {
                        if (measurement.Selected())
                            count++;
                    });

                    return count;
                },
                owner: self
            });

            self.analogChannelCount = ko.pureComputed({
                read: function() {
                    return self.measurements().length - self.digitalChannelCount();
                },
                owner: self
            });

            self.digitalChannelCount = ko.pureComputed({
                read: function() {
                    var count = 0;

                    self.measurements().forEach(function(measurement) {
                        if (measurement.IsDigital())
                            count++;
                    });

                    return count;
                },
                owner: self
            });

            // Methods
            self.analyzeConfig = function() {
                if (!self.dataHubIsConnected())
                    return $.Deferred().resolve().promise();

                self.measurements.removeAll();
                self.analogIndex = 0;
                self.digitalIndex = 0;

                $("#responsiveTableDiv").show();
                $("[id=deviceRow]").css("visibility", "hidden");
                $("#bulkSelectionButtons").hide();
                $("#loadingDataLabel").show();
                self.channelCount("Calculating...");

                return dataHub.loadCOMTRADEConfiguration(self.configFile())
                    .done(function(schema) {

                        $("#configInfo").html(String.format("Station Name: {0} &ndash; Device ID: {1} &ndash; Version: {2} &ndash; File type: {3} &ndash; Start Time: {4}", schema.StationName, schema.DeviceID, schema.Version, schema.FileType, schema.StartTime));

                        var observableMeasurements = [];


                    })
                    .fail(function(error) {
                        showErrorMessage(String.format("Failed to analyze COMTRADE configuration \"{0}\": {1}", self.configFile(), error));

                        self.channelCount("0");
                        $("[id=deviceRow]").css("visibility", "visible");
                        $("#loadingDataLabel").hide();
                    });
            }

            self.queryMeasurements = function(deviceID) {
                if (!self.dataHubIsConnected())
                    return $.Deferred().resolve().promise();

                self.measurements.removeAll();
                self.analogIndex = 0;
                self.digitalIndex = 0;

                $("#responsiveTableDiv").show();
                $("[id=deviceRow]").css("visibility", "hidden");
                $("#bulkSelectionButtons").hide();
                $("#loadingDataLabel").show();
                self.channelCount("Calculating...");

                return dataHub.queryDeviceMeasurements(deviceID)
                    .done(function(measurements) {
                        var observableMeasurements = [];

                        // Make each JSON record observable so per row editing and validation can occur
                        measurements.forEach(function(measurement) {
                            if (!isStatisticMeasurement(measurement.SignalTypeID)) {
                                const observableMeasurement = self.deriveObservableMeasurement(measurement, false);
                                observableMeasurements.push(observableMeasurement);
                            }
                        });

                        observableMeasurements.sort(function(a, b) {
                            const aIsDigital = a.IsDigital();
                            const bIsDigital = b.IsDigital();

                            if (aIsDigital && !bIsDigital)
                                return 1;

                            if (!aIsDigital && bIsDigital)
                                return -1;

                            const aIndex = a.ChannelIndex;
                            const bIndex = b.ChannelIndex;

                            return aIndex < bIndex ? -1 : (aIndex > bIndex ? 1 : 0);
                        });

                        self.measurements(observableMeasurements);

                        // Make sure table is refreshed
                        if (ko.options.deferUpdates)
                            ko.tasks.runEarly();

                        self.errors = ko.validation.group(self.measurements);
                        self.refreshValidationErrors();

                        $("[id=deviceRow]").css("visibility", "visible");
                        $("#loadingDataLabel").hide();
                        $("#bulkSelectionButtons").show();

                        self.channelCount(String.format(channelCountFormat, self.measurements().length, self.analogChannelCount(), self.digitalChannelCount(), self.existingMeasurementCount(), self.newMeasurementCount()));
                        self.isDirty(false);
                    })
                    .fail(function(error) {
                        showErrorMessage(String.format("Failed to load device measurements: {0}", error));

                        self.channelCount("0");
                        $("[id=deviceRow]").css("visibility", "visible");
                        $("#loadingDataLabel").hide();
                    });
            }

            self.saveMeasurements = function() {
            }

            self.refreshValidationErrors = function() {
                // Force re-evaluation of persnickety validation properties
                self.measurements().forEach(function(measurement) {
                    measurement.PointTag.valueHasMutated();
                });

                // Make sure any initial validation error messages are visible
                self.errors.showAllMessages();
            }

            self.deriveObservableMeasurement = function(measurement, refreshValidationErrors) {
                // Map all JSON elements as validated observables
                const observableMeasurement = ko.mapping.fromJS(measurement);

                // Add extra fields to observable measurement
                observableMeasurement.Selected = ko.observable(false);

                // Make sure measurement PointTag field meet specifications (acronym plus colon)
                observableMeasurement.PointTag.extend({
                    required: { onlyIf: observableMeasurement.Selected },
                    pattern: {
                        onlyIf: observableMeasurement.Selected,
                        message: "Only upper case letters, numbers, '!', '-', '@@', '#', '_' , '.', ':' and '$' are allowed.",
                        params: "^[A-Z0-9\\-!_\\.\\:@@#\\$]+$"
                    },
                    measurementUniqueOnPage: {
                        measurements: self.measurements,
                        targetMeasurement: observableMeasurement
                    },
                    measurementUniqueInDatabase: {
                        targetMeasurement: observableMeasurement
                    }
                });

                observableMeasurement.Status = ko.pureComputed(function() {
                    return (observableMeasurement.PointID() === 0 ? "new-record" : "existing-record") + (observableMeasurement.Selected() ? "" : " disabled");
                });

                observableMeasurement.IsDigital = ko.pureComputed(function() {
                    return isDigitalMeasurement(observableMeasurement.SignalTypeID());
                });

                if (observableMeasurement.IsDigital())
                    self.digitalIndex++;
                else
                    self.analogIndex++;

                observableMeasurement.ChannelIndex = observableMeasurement.IsDigital() ? self.digitalIndex : self.analogIndex;

                if (observableMeasurement.AlternateTag() == null || observableMeasurement.AlternateTag().length === 0)
                    observableMeasurement.AlternateTag((observableMeasurement.IsDigital() ? "DIGITAL:" : "ANALOG:") + observableMeasurement.ChannelIndex);

                if (refreshValidationErrors === undefined)
                    refreshValidationErrors = true;

                if (refreshValidationErrors)
                    self.refreshValidationErrors();

                return observableMeasurement;
            }

            self.validationErrors = ko.pureComputed(function() {
                return self.errors().length;
            }).extend({
                notify: "always"
            });
        }

        // Load existing device data
        function loadDeviceConnection(id) {
            if (!hubIsConnected)
                return;

            dataHub.queryDeviceByID(id)
                .done(function(device) {
                    $("#editDeviceName").html("Editing&nbsp;" + device.Acronym);

                    // Parse connection string
                    const connectionString = new Dictionary(device.ConnectionString.parseKeyValuePairs());

                    viewModel.configFile(connectionString.get("configFile"));
                    viewModel.deviceAcronym(device.Acronym);

                    setTimeout(function() {
                        viewModel.queryMeasurements(id);
                    }, 100)
                .fail(function(error) {
                    showErrorMessage(String.format("Failed to load existing device \"{0}\": {1}", id, error));
                });
                });
        }

        function resizePageElements() {
            $("#inputDeviceAcronym").width($("#inputConfigFile").width());
            $("#contentWell").height(calculateRemainingBodyHeight() - $("#headerArea").outerHeight(true));
        }

        // Page initialization function
        $(function() {
            $("#bodyContainer").addClass("fill-height");

            // Define local rule that will check that path exists from server perspective
            ko.validation.rules["serverPathExists"] = {
                async: true,
                validator: function(newVal, options, callback) {
                    if (options && viewModel.dataHubIsConnected()) {
                        dataHub.fileExists(newVal)
                            .done(function(result) {
                                callback(result);
                            })
                            .fail(function(error) {
                                showErrorMessage(error);
                                callback(false);
                            });
                    }
                    else {
                        callback(true);
                    }
                },
                message: "File does not exist or user \"@UserInfo.CurrentUserID\" does not have rights to path."
            };

            // Define local rule that will check that device acronym is unique in the database
            ko.validation.rules["deviceUniqueInDatabase"] = {
                async: true,
                validator: function(newVal, options, callback) {
                    if (options && viewModel.dataHubIsConnected()) {
                        // Lookup Device record by Acronym - this will return an empty record if not found
                        dataHub.queryDevice(newVal)
                            .done(function(device) {
                                // Valid if device doesn't exist or is itself
                                callback(device.ID === 0 || device.ID === deviceID);
                            })
                            .fail(function(error) {
                                showErrorMessage(error);

                                // Do not display validation failure message for connection issues
                                callback(true);
                            });
                    }
                    else {
                        callback(true);
                    }
                },
                message: "This device acronym already exists in the database. Acronyms must be unique."
            };

            // Define local rule that will check that measurement acronym is unique on the page
            ko.validation.rules["measurementUniqueOnPage"] = {
                validator: function (newVal, options) {
                    const targetMeasurement = options.targetMeasurement;
                    var count = 0;

                    if (targetMeasurement.Selected()) {
                        // Count the number of times PointTag matches when selected
                        ko.utils.arrayForEach(options.measurements(), function(measurement) {
                            if (measurement.Selected() && measurement.PointTag() === targetMeasurement.PointTag())
                                count++;
                        });
                    }

                    return count < 2;
                },
                message: "This measurement point tag already exists on the page. Point tags must be unique."
            };

            // Define local rule that will check that measurement acronym is unique in the database
            ko.validation.rules["measurementUniqueInDatabase"] = {
                async: true,
                validator: function(newVal, options, callback) {
                    const targetMeasurement = options.targetMeasurement;

                    if (viewModel.dataHubIsConnected() && targetMeasurement.Selected()) {
                        // Lookup Measurement record by PointTag - this will return an empty record if not found
                        dataHub.queryMeasurementByPointTag(newVal)
                            .done(function(measurement) {
                                // Valid if measurement doesn't exist or is itself
                                callback(measurement.PointID === 0 || measurement.PointID === targetMeasurement.PointID());
                            })
                            .fail(function(error) {
                                showErrorMessage(error);

                                // Do not display validation failure message for connection issues
                                callback(true);
                            });
                    }
                    else {
                        callback(true);
                    }
                },
                message: "This measurement point tag already exists in the database. Point tags must be unique."
            };

            ko.validation.rules.pattern.message = "Invalid.";

            // Enable knockout validation
            ko.validation.init({
                registerExtenders: true,
                messagesOnModified: true,
                insertMessages: true,
                parseInputAttributes: true,
                allowHtmlMessages: true,
                messageTemplate: null,
                decorateElement: true,
                errorElementClass: "has-error",
                errorMessageClass: "help-block",
                grouping: { deep: true, observable: true, live: true }
            }, true);

            // Enable deferred updates for better performance
            ko.options.deferUpdates = true;

            // Create the primary view model
            viewModel = new DeviceViewModel();

            // Initialize primary view model
            ko.applyBindings(viewModel);

            // Monitor for view model changes
            ko.watch(viewModel.devices, { depth: -1 }, function(parents, child, item) {
                viewModel.isDirty(true);
            });

            // Let view model know about hub connectivity changes
            $(window).on("hubConnected", function() {
                viewModel.dataHubIsConnected(true);

                if (deviceID > 0) {
                    loadDeviceConnection(deviceID);
                }
            });

            $(window).on("hubDisconnected", function() {
                viewModel.dataHubIsConnected(false);
            });

            $(window).on("messageVisibiltyChanged", function() {
                resizePageElements();
            });

            $(window).resize(function() {
                resizePageElements();
            });

            // Define button handlers
            $("#analyzeConfig").click(function(event) {
                event.preventDefault(); // Stop form submission :-p
                $("#analyzeConfig").disable();

                viewModel.analyzeConfig()
                    .done(function() {
                        $("#analyzeConfig").enable();
                    })
                    .fail(function() {
                        $("#analyzeConfig").enable();
                    });
            });

            $("#selectAll").click(function() {
                viewModel.measurements().forEach(function(measurement) {
                    measurement.Selected(true);
                });
            });

            $("#unselectAll").click(function() {
                viewModel.measurements().forEach(function(measurement) {
                    measurement.Selected(false);
                });
            });

            $("#saveMeasurements").click(function() {
                viewModel.saveMeasurements();
            });

            resizePageElements();
        });
    </script>
}