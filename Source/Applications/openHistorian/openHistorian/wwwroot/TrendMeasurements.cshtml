@*******************************************************************************************************
//  TrendMeasurements.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  07/30/2016 - Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System.Text
@using GSF.Web.Model
@using openHistorian
@using openHistorian.Model
@inherits ExtendedTemplateBase<AppModel>
@section StyleSheets {
    <style>
        html, body {
            height: 100%;
        }

        .tabs-nohdr {
            padding: 0;
            background: none;
            border-width: 0;
        }
         
        .tabs-nohdr .ui-tabs-nav {
            padding: 0;
            background: transparent;
            border: none;
        }

        .tabs-nohdr .ui-tabs-panel {
            border: none;
            padding: 0;
            margin: 0;
        }

        /* Collapsable button style */
        .btn-collapsable.btn {
            color: #606060;
            font-family: "Glyphicons Halflings";
            font-size: 8pt;
            margin-top: 3px;
            margin-left: -137px;
            padding: 0 2px 2px 2px;
            height: 18px;
            -webkit-transition: all .75s ease-out;
            -moz-transition: all .75s ease-out;
            transition: all .75s ease-out;
        }

        .btn-collapsable.btn.collapsed {
            margin-top: 7px;
            margin-left: -130px;
            -webkit-transition: all .75s ease-out;
            -moz-transition: all .75s ease-out;
            transition: all .75s ease-out;
        }

        /* Collapsable button icon when content is shown - arrow down */
        .btn-collapsable.btn:after {
            content: "\e114";
        }

        /* Collapsable button icon when content is hidden - arrow right */
        .btn-collapsable.btn.collapsed:after {
            content: "\e080";
        }

        #scrollablePointsArea {
            overflow: -moz-scrollbars-vertical; 
            overflow-y: scroll;
        }

        #selectAllMessage {
            position: absolute;
            margin-top: 8px;
            margin-left: 15px;
            font-size: smaller;
            outline: none;
        }

        #selectAllMessage a {
            color: #337ab7;
            text-decoration: none;
        }

        #selectAllMessage a:active, a:hover, a:focus {
            color: #23527c;
            text-decoration: underline;
            cursor: pointer;
        }

        span.fixed-font {
            font-size: small;
            font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;
        }

        span.input-group-addon i.disabled {
            color: #ccc;
            cursor: not-allowed;
        }
    </style>
}
@{ 
    DataContext dataContext = ViewBag.DataContext;
    StringBuilder pageControlScripts = ViewBag.PageControlScripts;

    Layout = "Layout.cshtml";
    ViewBag.Title = "Trend/Export Measurements";
    ViewBag.AddNewEditTitle = "Measurement Detail";
    ViewBag.ShowSearchFilter = true;
    ViewBag.HideUnauthorizedControls = true;
    ViewBag.CanEdit = false;
    ViewBag.CanAddNew = false;
    ViewBag.CanDelete = false;

    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { null, "<input type='checkbox' id='selectAllCheckbox' title='Select All'/>", "text-center valign-middle" },
        new[] { "ID", "ID", "text-center" },
        new[] { "SignalType", "Type", "text-center" },
        new[] { "PointTag", "Tag&nbsp;Name", "text-left" },
        new[] { "SignalReference", "Signal&nbsp;Reference", "text-left" },
        new[] { "Description", "Description", "text-left" }
    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
    ViewBag.PageRecordsForEachBinding = "afterRender: postRecordRendering";

    // Prepend view model extension scripts to occur before model initialization
    pageControlScripts.Insert(0, ExtendedViewModel(dataContext).ToString().TrimStart());
}
@helper BodyRows()
{
    <td width="5%" class="text-center valign-middle"><input type="checkbox" /></td>
    <td width="5%" class="text-center valign-middle"><span data-bind="text: PointID"></span></td>
    <td width="5%" class="text-center valign-middle"><span data-bind="text: SignalType"></span></td>
    <td width="15%" class="text-left valign-middle"><div data-bind="attr: { title: PointTag }"><button type="button" class="btn btn-link btn-sm" data-bind="text: PointTag.truncate(25), click: $parent.viewPageRecord"></button></div></td>
    <td width="15%" class="text-left valign-middle table-cell-hard-wrap"><div data-bind="text: $($element.parentElement).truncateToWidth(SignalReference, 2), attr: { title: SignalReference }"></div></td>
    <td width="50%" class="text-left table-cell-wrap"><div data-bind="text: $($element.parentElement).truncateToWidth(Description, 1.85), attr: { title: Description }"></div></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" title="View Measurement Detail..." data-bind="click: $parent.viewPageRecord, enable: $parent.dataHubIsConnected"><span class="glyphicon glyphicon-list"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    <div class="col-md-6">
        @Raw(dataContext.AddInputField<ActiveMeasurement>("ID", customDataBinding: "disable: true"))
        @Raw(dataContext.AddInputField<ActiveMeasurement>("SignalID", customDataBinding: "disable: true"))
        @Raw(dataContext.AddInputField<ActiveMeasurement>("Device"))
        @Raw(dataContext.AddInputField<ActiveMeasurement>("PointTag", initialFocus: true))
        @Raw(dataContext.AddInputField<ActiveMeasurement>("AlternateTag"))
        @Raw(dataContext.AddInputField<ActiveMeasurement>("SignalReference"))
        @Raw(dataContext.AddInputField<ActiveMeasurement>("SignalType"))
        @Raw(dataContext.AddInputField<ActiveMeasurement>("FramesPerSecond"))
    </div>
    <div class="col-md-6">
        @Raw(dataContext.AddTextAreaField<ActiveMeasurement>("Description", 4))
        @Raw(dataContext.AddInputField<ActiveMeasurement>("Protocol"))
        @Raw(dataContext.AddInputField<ActiveMeasurement>("Adder"))
        @Raw(dataContext.AddInputField<ActiveMeasurement>("Multiplier"))
        @Raw(dataContext.AddInputField<ActiveMeasurement>("Company"))
        @Raw(dataContext.AddInputField<ActiveMeasurement>("Longitude"))
        @Raw(dataContext.AddInputField<ActiveMeasurement>("Latitude"))
        <div class="form-inline pull-right">
            @Raw(dataContext.AddCheckBoxField<ActiveMeasurement>("Internal"))&nbsp;
            @Raw(dataContext.AddCheckBoxField<ActiveMeasurement>("Subscribed"))
        </div>
    </div>
}
@helper ExtendedViewModel(DataContext dataContext)
{
    <script>
        // Data query resolutions enumeration
        var Resolutions = {
            Full: 0,
            TenPerSecond: 1,
            EverySecond: 2,
            Every10Seconds: 3,
            Every30Seconds: 4,
            EveryMinute: 5,
            Every10Minutes: 6,
            Every30Minutes: 7,
            EveryHour: 8,
            EveryDay: 9,
            EveryMonth: 10
        }

        function getResolutionDescription(resolution) {
            switch (resolution) {
                case Resolutions.Full:
                    return "Full";
                case Resolutions.TenPerSecond:
                    return "Ten per Second";
                case Resolutions.EverySecond:
                    return "Every Second";
                case Resolutions.Every10Seconds:
                    return "Every 10 Seconds";
                case Resolutions.Every30Seconds:
                    return "Every 30 Seconds";
                case Resolutions.EveryMinute:
                    return "Every Minute";
                case Resolutions.Every10Minutes:
                    return "Every 10 Minutes";
                case Resolutions.Every30Minutes:
                    return "Every 30 Minutes";
                case Resolutions.EveryHour:
                    return "Every Hour";
                case Resolutions.EveryDay:
                    return "Every Day";
                case Resolutions.EveryMonth:
                    return "Every Month";
            }

            return "Undefined Resolution: " + notNull(resolution);
        }

        function populateDataResolutionSelect() {
            const dataResolutionSelect = $("#trendDataResolution");

            for (let key in Resolutions) {
                if (Resolutions.hasOwnProperty(key)) {
                    const value = Resolutions[key];
                    dataResolutionSelect.append($("<option>", { value: value, text: getResolutionDescription(value)}));
                }
            }
        }

        function postRecordRendering(elements, sequenceRecord) {
            const checkbox = $(elements).find("input[type=checkbox]");

            if (!checkbox)
                return;

            checkbox.click(function() {
                const record = viewModel.pageRecords()[checkbox.parents("tr")[0].rowIndex - 1];

                if (checkbox[0].checked)
                    viewModel.addNewSelectedPointByRecord(record);
                else
                    viewModel.deleteSelectedPointByRecord(record);

                $("#selectAllMessage").invisible();

                setTimeout(function() {
                    checkbox[0].checked = false;
                }, 250);
            });

            // Allow up/down arrow keys to change focus between each row's checkbox
            checkbox.keydown(function(event) {
                if (event.which === 38) {
                    // Arrow up
                    const previousIndex = $(event.target).parents("tr")[0].rowIndex - 1;

                    if (previousIndex >= 0) {
                        const previous = $("#recordsTable").find("input[type=checkbox]:eq(" + previousIndex + ")");

                        if (!$.isEmptyObject(previous))
                            previous.focus();
                    }

                } else if (event.which === 40) {
                    // Arrow down
                    const nextIndex = $(event.target).parents("tr")[0].rowIndex + 1;

                    if (nextIndex <= viewModel.currentPageSize()) {
                        const next = $("#recordsTable").find("input[type=checkbox]:eq(" + nextIndex + ")");

                        if (!$.isEmptyObject(next))
                            next.focus();
                    }
                }
            });
        }

        function ExtendedViewModel() {
            const self = this;

            PagedViewModel.call(self);

            self.selectedPoints = ko.observableArray();

            self.addNewSelectedPoint = function(id, tag, signalType, description) {
                if (!self.selectedPoints().any(function(point) { return point.id === id }))
                    self.selectedPoints.push({ id: id, tag: tag, signalType: signalType, description: description });
            }

            self.deleteSelectedPoint = function(point) {
                self.selectedPoints.remove(point);
            }

            self.refreshSelectedPoints = function() {
                const points = self.selectedPoints();
                self.clearSelectedPoints();
                self.selectedPoints(points);
            }

            self.clearSelectedPoints = function() {
                self.selectedPoints([]);
            }

            self.addNewSelectedPointByRecord = function(record) {
                self.addNewSelectedPoint(record.PointID, record.PointTag, record.SignalType, record.Description);
            }

            self.deleteSelectedPointByRecord = function(record) {
                self.selectedPoints().any(function(point) {
                    if (point.id === record.PointID)
                        self.deleteSelectedPoint(point);
                });
            }

            self.getSelectedPointIDs = function() {
                var selectedPointIDs = [];

                self.selectedPoints().forEach(function(point) {
                    selectedPointIDs.push(point.id);
                });

                return selectedPointIDs;
            }

            self.startTime = ko.observable("");
            self.endTime = ko.observable("");
            self.useInterval = ko.observable(false);
            self.interval = ko.observable(5);
            self.intervalUnits = ko.observable(1);
            self.trendResolution = ko.observable(Resolutions.EverySecond);
        }

        function extendViewModel(event, data) {
            const newViewModel = new ExtendedViewModel();
            data.viewModel.cloneConfiguration(newViewModel);
            data.viewModel = newViewModel;

            // Populate data resolution drop-down before binding
            populateDataResolutionSelect();
        }

        $(window).on("beforeApplyBindings", extendViewModel);
    </script>
}
@section Scripts {
    <script src="Scripts/flot/jquery.flot.js"></script>
    <script src="Scripts/flot/jquery.flot.crosshair.js"></script>
    <script src="Scripts/flot/jquery.flot.navigate.js"></script>
    <script src="Scripts/flot/jquery.flot.resize.js"></script>
    <script src="Scripts/flot/jquery.flot.selection.js"></script>
    <script src="Scripts/flot/jquery.flot.time.js"></script>
    <script src="Scripts/flot/jquery.flot.axislabels.js"></script>
    <script>        
        "use strict";

        @Raw(dataContext.RenderViewModelConfiguration<ActiveMeasurement, DataHub>(ViewBag, "PointTag"))
        var plot;
        var plotData = [];

        function buildPlot(data) {
            $.each(data, function (i, d) {
                for (let j in plotData) {
                    if (plotData.hasOwnProperty(j)) {
                        if (plotData[j].label === d.ID) {
                            plotData[j].data.push([d.Timestamp, d.Value]);
                        }
                    }
                }
            });

            plot = $.plot("#placeholder", plotData, {
                series: {
                    shadowSize: 0
                },
                yaxes: [{
                    show: viewModel.selectedPoints().any(function(point) { return point.signalType === "FREQ" }),
                    position: "left",
                    axisLabel: "Frequency"
                }, {
                    show: viewModel.selectedPoints().any(function(point) { return point.signalType === "VPHM" }),
                    position: "left",
                    axisLabel: "Voltage"
                }, {
                    show: viewModel.selectedPoints().any(function(point) { return point.signalType === "IPHM" }),
                    position: "right",
                    axisLabel: "Current"
                }, {
                    show: viewModel.selectedPoints().any(function(point) { return point.signalType === "VPHA" || point.signalType === "IPHA" }),
                    position: "right",
                    axisLabel: "Angle"
                }],
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    timezone: "browser"
                }//,
                //legend: {
                //    show: true,
                //    container: $('#legend'),
                //    noColumns: 1,
                //    margin: 5
                //}
            });
        }

        var baseCalculateRemainingBodyHeight;

        // Override remaining body height calculation to include new tab rows
        var calculateRemainingBodyHeight = (function() {
            baseCalculateRemainingBodyHeight = calculateRemainingBodyHeight;

            return function() {
                return baseCalculateRemainingBodyHeight() - $("#tabs ul").outerHeight(true);
            }
        })();

        function getActiveTab() {
            return $("#tabs").tabs("option", "active");
        }

        function resizeSelectedPointsArea(refreshPageSize) {
            if (refreshPageSize === undefined)
                refreshPageSize = false;

            setTimeout(function() {
                const selectedPointsArea = $("#selectedPointsArea");

                if (getActiveTab() === 0)
                    selectedPointsArea.height($("#tabs").height() - 12);
                else
                    selectedPointsArea.height(baseCalculateRemainingBodyHeight());

                $("#scrollablePointsArea").height(selectedPointsArea.height() - $("#selectedPointsHeader").outerHeight(true) - 5);
            }, 300);

            const selectedPointsColumn = $("#selectedPointsColumn");

            if (selectedPointsColumn.hasClass("in")) {
                let areaWidth = $("#bodyContainer").innerWidth() * 0.2;

                if (areaWidth < 150)
                    areaWidth = 150;

                selectedPointsColumn.width(areaWidth);

                if (refreshPageSize) {
                    setTimeout(function () {
                        viewModel.calculatePageSize();
                        viewModel.refreshSelectedPoints();
                    }, 100);
                }
            }
        }

        function selectAllRecords() {
            $("#selectAllMessage").invisible();
            $("#tabs").tabs({ active: 0 });
            $("a[href='#tab1']").parent().focus();

            if (!viewModel.dataHubIsConnected())
                return;

            for (let page = 1; page <= viewModel.totalPages(); page++) {
                if (page !== viewModel.currentPage()) {
                    viewModel.queryRecords(viewModel.sortField(), viewModel.sortAscending(), page, viewModel.currentPageSize(), viewModel.filterText).done(function(records) {
                        records.forEach(function(record) {
                            viewModel.addNewSelectedPointByRecord(record);
                        });
                    }).fail(function(error) {
                        showErrorMessage(error);
                    });
                }
            }
        }

        function trendData() {
            if (!hubIsConnected)
                return;

            const selectedPointIDs = viewModel.getSelectedPointIDs();

            if (selectedPointIDs.length === 0)
                return;

            dataHub.getHistorianData(notNull($("#plotStartTime").val().formatDate(DateTimeFormat)), notNull($("#plotEndTime").val().formatDate(DateTimeFormat)), selectedPointIDs, viewModel.plotResolution()).done(function(data) {
                //$.each(data, function (i, d) {
                //    for (let j in plotData) {
                //        if (plotData[j].label === d.ID) {
                //            plotData[j].data.push([d.Timestamp, d.Value]);
                //        }
                //    }
                //});

                //for (let i = 0; i < plotData.length; ++i) {
                //    const num = (plotData[i].data.length - dataPointNumber);

                //    for (let j = 0; j < num; ++j)
                //        plotData[i].data.shift();

                //}

                //plot.setData(plotData);
                //plot.setupGrid();
                //plot.draw();

                //setTimeout(update, dataRefreshInterval);
            }).fail(function (error) {
                showErrorMessage(error);
            });
        }

        function exportData() {
        }

        $(function() {
            $("#tabs").tabs({
                active: 0,
                activate: function(event, ui) {
                    const searchHeader = $("#searchFilter").parents(".form-group");

                    switch (ui.newPanel.attr("id")) {
                        case "tab1":
                            searchHeader.show();
                            viewModel.calculatePageSize();
                            break;
                        case "tab2":
                            searchHeader.hide();
                            $("#trendTimeRangeSelection .input-group.date").datepicker({
                                todayBtn: "linked",
                                enableOnReadonly: false,
                                autoclose: true
                            });
                            break;
                        case "tab3":
                            searchHeader.hide();
                            $("#exportTimeRangeSelection .input-group.date").datepicker({
                                todayBtn: "linked",
                                enableOnReadonly: false,
                                autoclose: true
                            });
                            break;
                    }

                    resizeSelectedPointsArea();
                }
            });

            $("#selectedPointsColumn").on("shown.bs.collapse", function() {
                resizeSelectedPointsArea(true);
            });

            $(viewModel).on("pageSizeCalculated", function() {
                resizeSelectedPointsArea(false);
            });

            $(viewModel).on("pageRecordsQueried", function() {
                $("#selectAllMessage").invisible();
            });

            $(window).resize(resizeSelectedPointsArea);

            resizeSelectedPointsArea();

            const selectAllCheckbox = $("#selectAllCheckbox");

            selectAllCheckbox.click(function() {
                const checked = selectAllCheckbox[0].checked;

                for (let i = 0; i < viewModel.pageRecords().length; i++) {
                    const next = $("#recordsTable").find("input[type=checkbox]:eq(" + (i + 1) + ")");

                    if (!$.isEmptyObject(next)) {
                        if (next[0].checked !== checked)
                            next.click();
                    }                                             
                }
        
                if (viewModel.totalPages() > 1)
                    $("#selectAllMessage").visible();

                setTimeout(function() {
                    selectAllCheckbox[0].checked = false;
                }, 250);
            });

            selectAllCheckbox.keydown(function(event) {
                if (event.which === 40) {
                    // Arrow down
                    if (viewModel.currentPageSize() > 0) {
                        const next = $("#recordsTable").find("input[type=checkbox]:eq(1)");

                        if (!$.isEmptyObject(next))
                            next.focus();
                    }
                }
            });

            ko.watch(viewModel.currentPage, function(parents, child, item) {
                $("#selectAllMessage").invisible();
            });
        });
    </script>
}
<table>
    <tr>
        <td id="selectedPointsColumn" style="width: 20%; vertical-align: top; padding-right: 3px" class="collapse in">
            <div id="selectedPointsArea" class="well" style="padding: 5px">
                <div id="selectedPointsHeader" class="clearfix">
                    Selected Points&nbsp;<span data-bind="text: selectedPoints().length"></span><br/>
                    <button type="button" class="btn btn-sm">Save</button>
                    <button type="button" class="btn btn-sm">Load</button>
                    <button type="button" class="btn btn-sm pull-right" data-bind="click: clearSelectedPoints.bind($data)">Clear All</button>
                </div>
                <div id="scrollablePointsArea">
                    <table class="table table-striped table-bordered table-hover table-condensed">
                        <tbody data-bind="foreach: selectedPoints">
                            <tr>
                                <td style="width: 5%" class="text-center valign-middle" data-bind="text: id"></td>
                                <td style="width: 90%" class="table-cell-hard-wrap"><span class="fixed-font" data-bind="text: $($element.parentElement).truncateToWidth(tag, 2.25), attr: {title: String.format('{0}: {1}', signalType, description) }"></span></td>
                                <td style="width: 5%" class="text-center valign-middle"><button type="button" class="btn btn-xs" title="Unselect Point" data-bind="click: $parent.deleteSelectedPoint"><span class="glyphicon glyphicon-remove"></span></button></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </td>
        <td style="width: 80%; vertical-align: top">
            <div id="tabs" class="tabs-nohdr">
                <ul>
                    <li>
                        <button type="button" class="btn btn-xs btn-collapsable" data-toggle="collapse" data-target="#selectedPointsColumn"></button>
                        <a href="#tab1">Select Points</a>
                    </li>
                    <li><a href="#tab2">Trend Data</a></li>
                    <li>
                        <a href="#tab3">Export Data</a>
                        <span id="selectAllMessage" style="visibility: hidden">Selected <span data-bind="text: pageRecords().length"></span> points on the current page, <a class="active" onclick="selectAllRecords()">click here</a> to select all <span data-bind="text: recordCount"></span> points on all pages.</span>
                    </li>
                </ul>
                <div id="tab1" class="ui-tabs-active">
                    @Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")
                </div>
                <div id="tab2">
                    <div class="well clearfix" style="padding: 10px 20px 10px 20px" id="trendTimeRangeSelection">
                        @Raw(string.Format(Include("SelectTimeRange.cshtml").ToString(), "plot").Trim())
                        <form class="form-inline" role="form">
                            <div class="form-group form-group-sm">
                                <label for="trendDataResolution">Data Resolution:</label>
                                <select class="form-control" id="trendDataResolution" data-bind="value: trendResolution" style="width: 150px"></select>
                                &nbsp;&nbsp;
                            </div>
                            <div class="form-group form-group-sm">
                                <label for="trendChartResolution">Chart Resolution<sup>*</sup>:</label>
                                <div class="input-group">
                                    <input type="number" class="form-control" id="trendChartResolution" value="400" style="width: 65px">
                                    <span class="input-group-addon">values per selected point</span>
                                </div>
                            </div>
                        </form>
                        <hr class="quarter-break"/>
                        <sup>*</sup><em class="small">Set chart resolution to zero to trend all data values</em>
                        <hr class="thick-spacer">
                        <button type="submit" class="btn btn-primary pull-right" onclick="trendData()">Trend</button>
                    </div>
                    <div id="placeholder" style="width: 100%;"></div>
                </div>
                <div id="tab3">
                    <div class="well clearfix" style="padding: 10px 20px 10px 20px" id="exportTimeRangeSelection">
                        @Raw(string.Format(Include("SelectTimeRange.cshtml").ToString(), "export").Trim())
                        <form class="form-inline" role="form">
                            <div class="form-group form-group-sm">
                                <label for="exportFileFormat">File Format:</label>
                                <select class="form-control" id="exportFileFormat">
                                    <option value="0" selected>Comma Separated Values (CSV)</option>
                                    <option value="1">COMTRADE (ASCII)</option>
                                    <option value="2">COMTRADE (Binary)</option>
                                </select>
                                &nbsp;&nbsp;
                            </div>
                            <div class="form-group form-group-sm">
                                <label for="exportFrameRate">Frame Rate:</label>
                                <div class="input-group">
                                    <input type="number" class="form-control" id="exportFrameRate" value="30" style="width: 65px">
                                    <span class="input-group-addon">frames per second</span>
                                </div>
                            </div>
                        </form>
                        <hr class="quarter-break" />
                        <form class="form-inline" role="form">
                            <div class="checkbox">
                                <label for="exportAlignTimestamps"><input type="checkbox" id="exportAlignTimestamps"> <strong>Align&nbsp;Timestamps</strong></label>
                            </div>
                        </form>
                        <hr class="thick-spacer">
                        <button type="submit" class="btn btn-primary pull-right" onclick="exportData()">Export</button>
                    </div>
                </div>
            </div>
        </td>
    </tr>
</table>